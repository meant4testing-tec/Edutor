import { Profile, Medicine, Schedule, DoseStatus } from '../types';

declare const jspdf: any;

interface ReportData {
  profile: Profile;
  medicines: Medicine[];
  schedules: Schedule[];
  startDate: Date;
  endDate: Date;
}

const addImageToDoc = (doc: any, imageData: string, x: number, y: number, w: number, h: number) => {
    try {
        const img = new Image();
        img.src = imageData;
        const format = imageData.split(';')[0].split('/')[1].toUpperCase();
        doc.addImage(img, format, x, y, w, h);
    } catch(e) {
        console.error("Failed to add image to PDF", e);
        doc.text('Image could not be loaded', x, y);
    }
}

export const generatePDFReport = async (data: ReportData): Promise<void> => {
  const { profile, medicines, schedules, startDate, endDate } = data;
  const { jsPDF } = jspdf;
  const doc = new jsPDF();

  doc.setFontSize(20);
  doc.setTextColor(37, 99, 235);
  doc.text('Medicine History Report', 105, 20, { align: 'center' });

  doc.setFontSize(12);
  doc.setTextColor(15, 23, 42);
  doc.text(`Profile: ${profile.name}`, 14, 35);
  doc.text(`Report Period: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`, 14, 42);
  
  if (profile.picture) {
    addImageToDoc(doc, profile.picture, 160, 28, 35, 35);
  }

  const allPastSchedules = schedules.filter(s => new Date(s.scheduledTime) <= endDate);
  const totalDoses = allPastSchedules.filter(s => s.status === DoseStatus.TAKEN || s.status === DoseStatus.SKIPPED).length;
  const takenDoses = allPastSchedules.filter(s => s.status === DoseStatus.TAKEN).length;
  const complianceRate = totalDoses > 0 ? ((takenDoses / totalDoses) * 100).toFixed(1) : 'N/A';
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text(`Overall Compliance: ${complianceRate}%`, 105, 60, { align: 'center' });
  doc.setLineWidth(0.5);
  doc.line(14, 65, 196, 65);

  let yPos = 75;

  for (const medicine of medicines) {
    const medicineSchedules = schedules.filter(s => s.medicineId === medicine.id);
    if (medicineSchedules.length === 0) continue;

    if (yPos > 240) {
      doc.addPage();
      yPos = 20;
    }
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(13, 148, 136);
    doc.text(`${medicine.name} (${medicine.dose})`, 14, yPos);
    yPos += 7;

    if (medicine.doctorName) {
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(100, 116, 139);
        doc.text(`Prescribed by: ${medicine.doctorName}`, 14, yPos);
        yPos += 5;
    }

    const hasPrescriptionImg = !!medicine.prescriptionImage;
    const hasMedicineImg = !!medicine.medicineImage;
    if (hasPrescriptionImg || hasMedicineImg) {
       if (yPos > 200) { 
            doc.addPage();
            yPos = 20;
       }
       let currentX = 14;
       if(hasMedicineImg) {
           doc.setFontSize(9);
           doc.text('Medicine Image:', currentX, yPos);
           addImageToDoc(doc, medicine.medicineImage!, currentX, yPos + 2, 40, 40);
           currentX += 50;
       }
       if(hasPrescriptionImg) {
           doc.setFontSize(9);
           doc.text('Prescription:', currentX, yPos);
           addImageToDoc(doc, medicine.prescriptionImage!, currentX, yPos + 2, 60, 40);
       }
       yPos += 48;
    }
    
    const tableBody = medicineSchedules
        .sort((a,b) => new Date(a.scheduledTime).getTime() - new Date(b.scheduledTime).getTime())
        .map(s => {
            const scheduled = new Date(s.scheduledTime);
            const actual = s.actualTakenTime ? new Date(s.actualTakenTime) : null;
            return [
                scheduled.toLocaleString(),
                actual ? actual.toLocaleString() : '-',
                s.status.charAt(0).toUpperCase() + s.status.slice(1)
            ];
        });

    (doc as any).autoTable({
      startY: yPos,
      head: [['Scheduled Time', 'Actual Time Taken', 'Status']],
      body: tableBody,
      theme: 'grid',
      headStyles: { fillColor: [20, 184, 166] },
      didDrawPage: (data: any) => {
        yPos = data.cursor.y;
      }
    });

    yPos = (doc as any).previousAutoTable.finalY + 10;
  }

  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(100, 116, 139);
    doc.text(`Page ${i} of ${pageCount}`, 105, 287, { align: 'center' });
    doc.text(`Generated by Medicine Reminder on ${new Date().toLocaleString()}`, 105, 292, { align: 'center' });
  }
  
  const fileName = `${profile.name}_Medication_Report.pdf`;
  try {
    const pdfDataUri = doc.output('datauristring');
    const response = await fetch(pdfDataUri);
    const blob = await response.blob();
    const file = new File([blob], fileName, { type: 'application/pdf' });

    if (navigator.share && navigator.canShare({ files: [file] })) {
        await navigator.share({
            title: 'Medicine History Report',
            text: `Here is the medication report for ${profile.name}.`,
            files: [file],
        });
    } else {
        doc.save(fileName);
    }
  } catch (error) {
    console.error('Sharing failed, falling back to download:', error);
    doc.save(fileName);
  }
};